"""Experiment Description:

Parameters that we can play with:
1. number of dimensions (#dims)?
2. number of cubes (#cubes)?
3. how many string dimensions and integer dimensions?
4. overlapping and non-overlapping cubes?
5. dimensions ordering.
6. types of operations - creation, membership, contained_in, add_cube, add_hole.


Questions:
1. How does CanonicalHyperCubeSet compare to Z3ProductSet when all dimensions are string, #dims is fixed, and #cubes
is increasing?
    1.1. when the cubes are non-overlapping.
    1.2. when the cubes are overlapping.
2. How does CanonicalHyperCubeSet compare to Z3ProductSet when we have mixed dimensions? #dims is fixed, half are
strings, and half are integers? Interleaved. (int, string, int, string, ...)
    3.1. non-overlapping
    3.2. overlapping
3. Dimensions ordering: Is it better to place dimensions that are more complex (strings) earlier or later?
Play with how the dimensions are ordered, and see if we get some clear results on that.


Sketch:

Experiment 1: Non-overlapping string dimensions only.
- fix the number of dimensions to 5, 10, 15.
- increase the number of cubes from 3 to ???.
- the cubes will be generated by creating a single dimension, and then duplicating it.
- The string constraints will be a combination of exact match and prefix.
*** I can copy most of the code from multiple integer dimensions, and just change a few things.


Expectations:
- The results will

Experiment 2: Overlapping string dimensions only.
- Same as the above, but with overlapping cubes.

Experiment 3: Mixed string-integer dimensions, with interleaved dimensions.
- Same as the above, but with mixed dimensions.
- Repeat overlapping and non-overlapping versions.

Experiment 4: Different dimensions ordering
- set #dims = 9, and have 3 types of complex dimensions -
    1. strings with prefix + suffix.
    2. strings with exact match + prefix.
    3. intervals.
- compare between CanonicalHyperCubeSet with the same cubes, but with different dimensions ordering,
- one ordering that is interleaving, one where the more complex dimensions are first, and one where the
more complex dimensions are last.
- repeat for overlapping and non-overlapping cubes.

"""


def generate_overlapping_cubes(dim_idx_to_set_generator: ):
    pass

