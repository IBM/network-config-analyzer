namespaceList: ../../example_podlist/services1/ns_list.yaml
podList: ../../example_podlist/services1/

networkConfigList:
  - name: ip
    networkPolicyList:
      - policies.yaml
    expectedWarnings: 0

  - name: np0
    networkPolicyList:
      - services1-networkpolicy0.yaml
      - policies.yaml
    expectedWarnings: 0

  - name: np1
    networkPolicyList:
      - services1-networkpolicy1.yaml
      - policies.yaml
    expectedWarnings: 0

  - name: np2
    networkPolicyList:
      - services1-networkpolicy2.yaml
      - policies.yaml
    expectedWarnings: 0

queries:
  - name: connectivity_map
    connectivityMap:
    - ip
    - np0
    - np1
    - np2
    expected: 0
    outputConfiguration:
      outputFormat: txt
      fwRulesRunInTestMode: false
    expectedOutput: ../../expected_output/services1_connectivity_map.txt

  #TODO: check
  #- name: sanity
  #  sanity:
  #    - ip
  #    - np1
  #  expected: 1 #2
            # TODO: prev result was 2 , changed to 1
            # it does not seem to make sense to report redundancy between 2 different layers
            # currently this report is not in the output: " Ingress resource np1/default/demo-localhost/deny is redundant"
            # redundancy should be reported if it is within same layer, and not consider cross-layer redundancy
            # TODO: maybe there should be a warning for conflicting allowed_connections between 2 different layers
            # in this case the connections allowed be the Ingress resource are blocked by the network policies in the other layer

  - name: compare_np1_and_np2
    twoWayContainment:
      - np1
      - np2
    expected: 3

  - name: np1_and_np2_are_not_strongly_equivalent
    strongEquivalence:
      - np1
      - np2
    expected: 1

  - name: np1_and_np1_are_strongly_equivalent
    strongEquivalence:
      - np1
      - np1
    expected: 0

  - name: compare_specific_policies_in_np1_and_np2
    equivalence:
      - np1/ingress-nginx/allow-all-within-namespace
      - np2/ingress-nginx/allow-all-within-namespace
      - np1/ingress-nginx/allow-webhook-via-ingress
    expected: 2

  # TODO: check
  #- name: redundancy_np1_and_np2
  #  redundancy:
  #    - np1
  #    - np2
  #  expected:  3 # 4
  #            # TODO: same issue as above for sanity query

  - name: pairwiseInterferes_np1_and_np2
    pairwiseInterferes:
      - np1
      - np2
    expected: 0

  - name: not_empty
    emptiness:
      - ip
      - np1
      - np2
    expected: 0

  - name: not_vacuous
    vacuity:
      - ip
      - np1
      - np2
    expected: 0

  - name: containment_np1_and_np2
    containment:
      - np1
      - np2
    expected: 1

  - name: containment_np2_and_np1
    containment:
      - np2
      - np1
    expected: 1
