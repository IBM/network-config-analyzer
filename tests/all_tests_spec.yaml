# specification of files from which should generate tests (+ for output tests: which output args to use)
# each spec consists of args as follows:
#   name: just for documentation, describe test purposes
#   type: scheme / cmdline
#   root: root dir of scheme files (or cmdline_tests files) to use (recursively)
#   files_list: test only files from this list (not all files that are found from the root dir) [mandatory for cmdline tests]

# additional args relevant only for k8s_live_general tests:
# cluster_config: dict of the form {pods: pods_yaml_path , policies: policies_yaml_path}

# additional args relevant only for output tests:
#   expected_output: dir path of all expected output files

# additional args relevant only for output tests with scheme file:
#   out_format_arg: list of args e.g., ['txt', 'yaml'], to be used to override outputConfig outFormat with cli arg (generating test instance per each arg)
#   add_out_path_arg: flag to indicate if should override outputConfig outPath with cli arg
#   out_path_arg_suffix: if using add_out_path_arg, can determine the suffix of the out path arg file (prefix is corresponding to scheme file name)

#---------------------------------------------------------------------------------------------------------------------------------
general:
  # 1:  all scheme files in tests/   (including all sub-dirs)
  - name: all_scheme_tests
    type: scheme
    root: ./

  # 2: all cli queries in tests/cmdline_tests.yaml
  - name: general_cmdline_tests
    type: cmdline
    root: ./
    files_list:
      - cmdline_tests.yaml

#---------------------------------------------------------------------------------------------------------------------------------

k8s_live_general:
  # 1: all cli queries in tests/cmdline_live_k8s_tests.yaml
  - name: k8s_live_general_cmdline_tests
    type: cmdline
    root: ./
    cluster_config:
      pods: fw_rules_tests/podlist/kubernetes-manifests.yaml
      policies: fw_rules_tests/policies/microservices-netpols.yaml
    files_list:
      - cmdline_live_k8s_tests.yaml

#---------------------------------------------------------------------------------------------------------------------------------

output:
  # 1: override outputConfig with out_format in {txt, yaml} + out_path based on scheme file name (single out file, single out format)
  # applies to all scheme files in tests/fw_rules_tests/policies/
  - name: fw_rules_txt_and_yaml
    type: scheme
    root: fw_rules_tests/policies/
    expected_output: ./fw_rules_tests/policies/expected_output/
    out_format_arg: ['txt', 'yaml']
    add_out_path_arg: true
    out_path_arg_suffix: '_output'


  # 2: override outputConfig with out_format in {csv, md, dot} + out_path based on scheme file name (single out file, single out format)
  # applies to some scheme files in tests/fw_rules_tests/policies/ => a few selected files (specified in the files_list)
  - name: fw_rules_csv_md
    type: scheme
    root: fw_rules_tests/policies/
    expected_output: ./fw_rules_tests/policies/expected_output/
    files_list:
      - poc1-scheme.yaml
      - test4-scheme.yaml
      - semantic_diff_computeDiff-scheme.yaml
      - semantic_diff_namedPorts-scheme.yaml
      - semantic_diff_with_different_topologies-scheme.yaml
      - semantic_diff_withIpBlock-scheme.yaml
    out_format_arg: ['csv', 'md', 'dot']
    add_out_path_arg: true
    out_path_arg_suffix: '_output'

  #3: use outputConfig from scheme files (don't override) => (multiple output files + stdout , multiple output formats)
  # applies to all scheme files in tests/output_config_tests/policies/
  - name : output_config_no_cli_args
    type: scheme
    root: output_config_tests/policies/
    expected_output: ./output_config_tests/expected_output_files/
    add_out_path_arg: false


  #4: override only out file arg (use outputConfig from scheme files for out format) => (one output file per test, multiple output formats within this file content)
  # applies to all scheme files in tests/output_config_tests/policies/
  - name: output_config_only_out_file_arg_overriden
    type: scheme
    root: output_config_tests/policies/
    expected_output: ./output_config_tests/expected_output_files/
    add_out_path_arg: true
    out_path_arg_suffix: '_override_only_out_file_arg_output'

  #5: override only out format arg (use outputConfig from scheme files for out file / stdout) => (multiple output files per test, one output format)
  # applies to all scheme files in tests/output_config_tests/override_out_format_only/
  - name: output_config_only_out_format_arg_overriden
    type: scheme
    root: output_config_tests/override_out_format_only/
    expected_output: ./output_config_tests/expected_output_files/
    out_format_arg: ['txt']


  # 6: use queries from cmdline tests (connectivity/semantic-diff) [no scheme-file, thus no outputConfig]
  # out_format and out_path as defined on each cli query args => (one output file or stdout per query, one output format)
  # covers various combinations : (no output args , only out_format arg, only out_path arg, both out_format and out_path args)
  # applies to cli queries in tests/output_config_tests/output_cmdline_tests.yaml
  - name: output_cmdline_tests
    type: cmdline
    root: output_config_tests/
    expected_output: ./output_config_tests/expected_output_files/
    files_list:
      - output_cmdline_tests.yaml

#---------------------------------------------------------------------------------------------------------------------------------

# fw_rules_assertions: activate assertions to verify equivalence of  fw_rules output (semantically) to the input connectivity graph.
fw_rules_assertions:
  # 1:  all scheme files under tests/fw_rules_tests/policies/
  - name: all_scheme_tests
    type: scheme
    root: fw_rules_tests/policies/

#---------------------------------------------------------------------------------------------------------------------------------








